-- ILLUSION HUB - Advanced Desync GUI
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService('RunService')
local TweenService = game:GetService('TweenService')
local Workspace = game:GetService('Workspace')
local StarterGui = game:GetService('StarterGui')
local SoundService = game:GetService('SoundService')
local player = Players.LocalPlayer
local playerGui = player:WaitForChild('PlayerGui')

-- Cleanup old GUI
if playerGui:FindFirstChild('IllusionHub') then
    playerGui.IllusionHub:Destroy()
end

-- Create Main GUI
local gui = Instance.new('ScreenGui')
gui.Name = 'IllusionHub'
gui.ResetOnSpawn = false
gui.Parent = playerGui

-- Main Frame
local frame = Instance.new('Frame')
frame.Size = UDim2.new(0, 200, 0, 120)
frame.Position = UDim2.new(0.5, -100, 0.5, -60)
frame.BackgroundColor3 = Color3.fromRGB(15, 15, 20)
frame.BorderSizePixel = 0
frame.Parent = gui

-- Rounded corners
local corner = Instance.new('UICorner')
corner.CornerRadius = UDim.new(0, 18)
corner.Parent = frame

-- Dark gradient
local gradient = Instance.new('UIGradient')
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(20, 20, 30)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(15, 15, 25)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 10, 20))
}
gradient.Rotation = 45
gradient.Parent = frame

-- Animated stroke
local stroke = Instance.new('UIStroke')
stroke.Thickness = 2.5
stroke.Color = Color3.fromRGB(150, 100, 255)
stroke.Transparency = 0.2
stroke.Parent = frame

-- Title
local title = Instance.new('TextLabel')
title.Size = UDim2.new(1, 0, 0, 35)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = '⚡ ILLUSION HUB ⚡'
title.TextColor3 = Color3.new(1, 1, 1)
title.Font = Enum.Font.Arcade
title.TextSize = 20
title.TextStrokeTransparency = 0.5
title.TextStrokeColor3 = Color3.new(0, 0, 0)
title.Parent = frame

-- Desync Button
local desyncBtn = Instance.new('TextButton')
desyncBtn.Size = UDim2.new(0.9, 0, 0, 40)
desyncBtn.Position = UDim2.new(0.05, 0, 0, 45)
desyncBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
desyncBtn.Text = 'DESYNC'
desyncBtn.TextColor3 = Color3.new(1, 1, 1)
desyncBtn.Font = Enum.Font.Arcade
desyncBtn.TextSize = 16
desyncBtn.BorderSizePixel = 0
desyncBtn.Parent = frame

local btnCorner = Instance.new('UICorner')
btnCorner.CornerRadius = UDim.new(0, 12)
btnCorner.Parent = desyncBtn

local btnStroke = Instance.new('UIStroke')
btnStroke.Thickness = 1.5
btnStroke.Color = Color3.fromRGB(150, 100, 255)
btnStroke.Transparency = 0.4
btnStroke.Parent = desyncBtn

-- Status Label
local statusLabel = Instance.new('TextLabel')
statusLabel.Size = UDim2.new(1, 0, 0, 20)
statusLabel.Position = UDim2.new(0, 0, 0, 90)
statusLabel.BackgroundTransparency = 1
statusLabel.Text = 'READY'
statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
statusLabel.Font = Enum.Font.Arcade
statusLabel.TextSize = 12
statusLabel.Parent = frame

-- Glow animation
task.spawn(function()
    while frame.Parent do
        task.wait(0.1)
        local t = math.sin(tick() * 2.5)
        stroke.Color = Color3.fromRGB(150 + 50 * t, 100 + 50 * t, 255)
        stroke.Transparency = 0.2 + 0.1 * math.abs(t)
    end
end)

-- Make GUI Draggable
local dragging = false
local dragStart, startPos

frame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or 
       input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = frame.Position
        
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

frame.InputChanged:Connect(function(input)
    if (input.UserInputType == Enum.UserInputType.MouseMovement or 
        input.UserInputType == Enum.UserInputType.Touch) and dragging then
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
    end
end)

-- DESYNC LOGIC (from original code)
local antiHitActive = false
local desyncActive = false
local lockdownRunning = false
local invHealthConns = {}
local desyncHighlights = {}
local cloneListenerConn

local function notify(title, text, dur)
    pcall(function()
        StarterGui:SetCore('SendNotification', {
            Title = title or 'Info',
            Text = text or '',
            Duration = dur or 3
        })
    end)
end

local function addDesyncHighlight(model)
    if not model or desyncHighlights[model] then return end
    local highlight = Instance.new("Highlight")
    highlight.FillColor = Color3.fromRGB(0, 255, 100)
    highlight.OutlineColor = Color3.fromRGB(255, 50, 50)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = model
    desyncHighlights[model] = highlight
end

local function removeDesyncHighlight(model)
    local hl = desyncHighlights[model]
    if hl then
        pcall(function() hl:Destroy() end)
        desyncHighlights[model] = nil
    end
end

local function makeInvulnerable(model)
    if not model or not model.Parent then return end
    local hum = model:FindFirstChildOfClass('Humanoid')
    if not hum then return end
    
    pcall(function()
        hum.MaxHealth = 1e9
        hum.Health = 1e9
    end)
    
    if invHealthConns[model] then
        invHealthConns[model]:Disconnect()
    end
    
    invHealthConns[model] = hum.HealthChanged:Connect(function()
        pcall(function()
            if hum.Health < hum.MaxHealth then
                hum.Health = hum.MaxHealth
            end
        end)
    end)
    
    if not model:FindFirstChildOfClass('ForceField') then
        local ff = Instance.new('ForceField')
        ff.Visible = false
        ff.Parent = model
    end
    
    addDesyncHighlight(model)
    
    pcall(function()
        hum:SetStateEnabled(Enum.HumanoidStateType.Dead, false)
        hum:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
    end)
end

local function performDesyncLockdown(duration, onComplete)
    if lockdownRunning then
        if onComplete then pcall(onComplete) end
        return
    end
    lockdownRunning = true
    
    local char = player.Character
    if not char then
        lockdownRunning = false
        if onComplete then pcall(onComplete) end
        return
    end
    
    local hrp = char:FindFirstChild('HumanoidRootPart')
    local hum = char:FindFirstChildOfClass('Humanoid')
    if not hrp or not hum then
        lockdownRunning = false
        if onComplete then pcall(onComplete) end
        return
    end
    
    -- Create overlay
    local overlay = Instance.new('ScreenGui')
    overlay.Name = 'DesyncOverlay'
    overlay.ResetOnSpawn = false
    overlay.Parent = playerGui
    
    local blackFrame = Instance.new('Frame')
    blackFrame.Size = UDim2.new(2, 0, 2, 0)
    blackFrame.Position = UDim2.new(-0.5, 0, -0.5, 0)
    blackFrame.BackgroundColor3 = Color3.new(0, 0, 0)
    blackFrame.ZIndex = 9999
    blackFrame.Parent = overlay
    
    local label = Instance.new('TextLabel')
    label.Size = UDim2.new(1, 0, 0, 100)
    label.Position = UDim2.new(0, 0, 0.5, -50)
    label.BackgroundTransparency = 1
    label.Text = '⚡ WE ARE DESYNCING YOU ⚡'
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Font = Enum.Font.Arcade
    label.TextSize = 36
    label.ZIndex = 10000
    label.Parent = blackFrame
    
    -- Progress bar
    local barBg = Instance.new('Frame')
    barBg.Size = UDim2.new(0.4, 0, 0, 10)
    barBg.Position = UDim2.new(0.3, 0, 0.6, 0)
    barBg.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    barBg.BorderSizePixel = 0
    barBg.ZIndex = 10000
    barBg.Parent = overlay
    
    local barFill = Instance.new('Frame')
    barFill.Size = UDim2.new(0, 0, 1, 0)
    barFill.BackgroundColor3 = Color3.fromRGB(150, 100, 255)
    barFill.BorderSizePixel = 0
    barFill.ZIndex = 10001
    barFill.Parent = barBg
    
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(barFill, tweenInfo, {Size = UDim2.new(1, 0, 1, 0)})
    tween:Play()
    
    task.delay(duration, function()
        pcall(function() overlay:Destroy() end)
        lockdownRunning = false
        if onComplete then pcall(onComplete) end
    end)
end

local function activateDesync()
    if desyncActive then return end
    desyncActive = true
    pcall(function()
        if setfflag then
            setfflag('WorldStepMax', '-99999999999999')
        end
    end)
end

local function deactivateDesync()
    if not desyncActive then return end
    desyncActive = false
    pcall(function()
        if setfflag then
            setfflag('WorldStepMax', '1')
        end
    end)
end

local function activateClonerDesync(callback)
    local backpack = player:FindFirstChildOfClass('Backpack')
    if backpack then
        local tool = backpack:FindFirstChild('Quantum Cloner')
        if tool then
            local humanoid = player.Character and player.Character:FindFirstChildOfClass('Humanoid')
            if humanoid then
                humanoid:EquipTool(tool)
            end
        end
    end
    
    local packages = ReplicatedStorage:FindFirstChild('Packages')
    if packages then
        local net = packages:FindFirstChild('Net')
        if net then
            local useItem = net:FindFirstChild('RE/UseItem')
            if useItem then
                useItem:FireServer()
            end
            local onTeleport = net:FindFirstChild('RE/QuantumCloner/OnTeleport')
            if onTeleport then
                onTeleport:FireServer()
            end
        end
    end
    
    local cloneName = tostring(player.UserId) .. '_Clone'
    cloneListenerConn = Workspace.ChildAdded:Connect(function(obj)
        if obj.Name == cloneName and obj:IsA('Model') then
            makeInvulnerable(obj)
            local origChar = player.Character
            if origChar then
                makeInvulnerable(origChar)
            end
            if cloneListenerConn then
                cloneListenerConn:Disconnect()
                cloneListenerConn = nil
            end
            performDesyncLockdown(1.6, function()
                if callback then pcall(callback) end
            end)
        end
    end)
end

local function executeAntiHit()
    if antiHitActive then
        -- Deactivate
        antiHitActive = false
        deactivateDesync()
        
        for model, _ in pairs(desyncHighlights) do
            removeDesyncHighlight(model)
        end
        
        local clone = Workspace:FindFirstChild(tostring(player.UserId) .. '_Clone')
        if clone then
            pcall(function() clone:Destroy() end)
        end
        
        desyncBtn.Text = 'DESYNC'
        desyncBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        statusLabel.Text = 'DEACTIVATED'
        statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    else
        -- Activate
        antiHitActive = true
        desyncBtn.Text = 'LOADING...'
        desyncBtn.BackgroundColor3 = Color3.fromRGB(255, 200, 60)
        statusLabel.Text = 'PROCESSING'
        statusLabel.TextColor3 = Color3.fromRGB(255, 200, 60)
        
        activateDesync()
        task.wait(0.1)
        activateClonerDesync(function()
            deactivateDesync()
            desyncBtn.Text = 'ACTIVE'
            desyncBtn.BackgroundColor3 = Color3.fromRGB(60, 255, 120)
            statusLabel.Text = 'PROTECTED'
            statusLabel.TextColor3 = Color3.fromRGB(60, 255, 120)
            notify('Illusion Hub', 'Desync Activated Successfully!', 3)
        end)
    end
end

-- Button click
desyncBtn.MouseButton1Click:Connect(executeAntiHit)

-- Hover effects
desyncBtn.MouseEnter:Connect(function()
    if not antiHitActive then
        TweenService:Create(desyncBtn, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(50, 50, 60)
        }):Play()
    end
end)

desyncBtn.MouseLeave:Connect(function()
    if not antiHitActive then
        TweenService:Create(desyncBtn, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(40, 40, 50)
        }):Play()
    end
end)

-- Final print
print("⚡ ILLUSION HUB - Injected Successfully!")
notify('Illusion Hub', 'Injected Successfully! ⚡', 4)
